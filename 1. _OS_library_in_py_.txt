# File and Directory Management

 - os.startfile(path)  #: Opens a file, folder, or application with the default program on Windows.
 - os.getcwd()  #: Get the current working directory.
 - os.chdir(path)  #: Change the current working directory.
 - os.listdir(path)  #: List all files and directories in a given path.
 - os.rename(src, dst)  #: Rename a file or directory.
 - os.remove(path)  #: Delete a file.
 - os.rmdir(path)  #: Remove an empty directory.
 - os.makedirs(path)  #: Create nested directories. 


# The os.path module provides utilities to manipulate abd query file paths. 

- os.path.exists(path): Check if a path exists.
- os.path.isfile(path): Check if a path is a file.
- os.path.isdir(path): Check if a path is a directory.
- os.path.abspath(path): Get the absolute path of a file or directory.
- os.path.dirname(path): Get the directory name of a file path.
- os.path.basename(path): Get the base name of a file.
- os.path.split(path): Split a path into directory and file parts.
- os.path.join(path, *paths): Combine paths intelligently. 


#File Descriptors

- os.open(path, flags): Open a file and return its file descriptor.
- os.read(fd, n): Read n bytes from the file descriptor.
- os.write(fd, str): Write a string to the file descriptor.
- os.close(fd): Close a file descriptor. 


# Using 

Can be using to recognize the other files on the same(script what we ran) or specific directory/location...

# Script Location  # how to fined the files location

- os.path.dirname(os.path.abspath(__file__)): Get the directory where the Python script is located.
- __file__: Represents the relative path of the currently executing script. Use it with os.path functions to get the script's location.

import os
locationx = os.path.dirname(os.path.abspath(__file__)) # or use file name or path
otheriteams = os.listdir(locationx)
print(otheriteams)

